import React, { useState } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { HomeTestKitService, TestKitType } from '@/services/HomeTestKitService';
import { HealthTimelineService } from '@/services/HealthTimelineService';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { MapPin, Clock, Package, CreditCard, Truck } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface TestKitOrderModalProps {
  isOpen: boolean;
  onClose: () => void;
  testKit: TestKitType;
  onOrderComplete: () => void;
}

export const TestKitOrderModal: React.FC<TestKitOrderModalProps> = ({
  isOpen,
  onClose,
  testKit,
  onOrderComplete
}) => {
  const { user } = useAuth();
  const [loading, setLoading] = useState(false);
  const [shippingAddress, setShippingAddress] = useState('');
  const [phoneNumber, setPhoneNumber] = useState('');
  const [specialInstructions, setSpecialInstructions] = useState('');
  const { toast } = useToast();

  const handleOrder = async () => {
    if (!user) {
      toast({
        title: "Authentication Required",
        description: "Please log in to order a test kit",
        variant: "destructive",
      });
      return;
    }

    if (!shippingAddress.trim() || !phoneNumber.trim()) {
      toast({
        title: "Missing Information",
        description: "Please provide shipping address and phone number",
        variant: "destructive",
      });
      return;
    }

    setLoading(true);
    try {
      // Create the test kit order
      const orderData = {
        user_id: user.id,
        kit_type: testKit.type,
        kit_name: testKit.name,
        shipping_address: shippingAddress,
        price: testKit.price,
        status: 'ordered' as const,
        order_number: '', // Will be auto-generated by trigger
        results_available: false,
        collection_instructions: `Sample collection instructions for ${testKit.name}. Please follow the included guide carefully.`
      };

      const order = await HomeTestKitService.orderTestKit(orderData);

      // Create timeline event
      await HealthTimelineService.createGenomicTestEvent(user.id, order);

      toast({
        title: "Order Successful!",
        description: `Your ${testKit.name} kit has been ordered. Order number: ${order.order_number}`,
      });

      onOrderComplete();
    } catch (error) {
      console.error('Error ordering test kit:', error);
      toast({
        title: "Order Failed",
        description: "There was an error processing your order. Please try again.",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Package className="h-5 w-5" />
            Order Test Kit
          </DialogTitle>
          <DialogDescription>
            Complete your order for the {testKit.name} test kit
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-6">
          {/* Test Kit Summary */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">{testKit.name}</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-muted-foreground mb-4">{testKit.description}</p>
              
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div className="flex items-center gap-2">
                  <Clock className="h-4 w-4 text-muted-foreground" />
                  <span className="text-sm">{testKit.turnaround_time}</span>
                </div>
                <div className="flex items-center gap-2">
                  <Package className="h-4 w-4 text-muted-foreground" />
                  <span className="text-sm">{testKit.sample_type} sample</span>
                </div>
              </div>

              <div className="space-y-2">
                <Label className="text-sm font-medium">What's Included:</Label>
                <div className="grid grid-cols-1 gap-1">
                  {testKit.includes.map((item, index) => (
                    <div key={index} className="text-sm text-muted-foreground flex items-center">
                      <span className="w-1 h-1 bg-primary rounded-full mr-2"></span>
                      {item}
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Shipping Information */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg flex items-center gap-2">
                <Truck className="h-5 w-5" />
                Shipping Information
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="shipping-address">Shipping Address *</Label>
                <Textarea
                  id="shipping-address"
                  placeholder="Enter your complete address including city and state"
                  value={shippingAddress}
                  onChange={(e) => setShippingAddress(e.target.value)}
                  className="mt-1"
                />
              </div>
              
              <div>
                <Label htmlFor="phone-number">Phone Number *</Label>
                <Input
                  id="phone-number"
                  type="tel"
                  placeholder="e.g. +234 801 234 5678"
                  value={phoneNumber}
                  onChange={(e) => setPhoneNumber(e.target.value)}
                  className="mt-1"
                />
              </div>

              <div>
                <Label htmlFor="special-instructions">Special Instructions (Optional)</Label>
                <Textarea
                  id="special-instructions"
                  placeholder="Any special delivery instructions"
                  value={specialInstructions}
                  onChange={(e) => setSpecialInstructions(e.target.value)}
                  className="mt-1"
                />
              </div>
            </CardContent>
          </Card>

          {/* Order Summary */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg flex items-center gap-2">
                <CreditCard className="h-5 w-5" />
                Order Summary
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span>{testKit.name}</span>
                  <span>₦{testKit.price.toLocaleString()}</span>
                </div>
                <div className="flex justify-between">
                  <span>Shipping</span>
                  <span className="text-green-600">Free</span>
                </div>
                <Separator />
                <div className="flex justify-between font-semibold text-lg">
                  <span>Total</span>
                  <span>₦{testKit.price.toLocaleString()}</span>
                </div>
              </div>

              <div className="mt-4 p-3 bg-blue-50 rounded-lg">
                <div className="text-sm text-blue-800">
                  <strong>What happens next:</strong>
                  <ul className="list-disc list-inside mt-2 space-y-1">
                    <li>Kit ships within 1-2 business days</li>
                    <li>You'll receive tracking information via email</li>
                    <li>Collect sample using included instructions</li>
                    <li>Return sample using provided shipping label</li>
                    <li>Results available in {testKit.turnaround_time}</li>
                  </ul>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={onClose} disabled={loading}>
            Cancel
          </Button>
          <Button onClick={handleOrder} disabled={loading}>
            {loading ? 'Processing...' : `Order for ₦${testKit.price.toLocaleString()}`}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};